<?php


// –¢—Ä–µ–π—Ç Loggable –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
trait Loggable
{
    private $logFile = 'user_log.txt';

    public function log($message)
    {
        $timestamp = date('Y-m-d H:i:s');
        $logEntry = "[{$timestamp}] {$message}" . PHP_EOL;

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        file_put_contents($this->logFile, $logEntry, FILE_APPEND | LOCK_EX);

        // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        echo "<div style='background: #f0f0f0; padding: 10px; margin: 5px 0; border-left: 4px solid #007cba;'>";
        echo "<strong>LOG:</strong> [{$timestamp}] {$message}";
        echo "</div>";
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
    public function getLogs()
    {
        if (file_exists($this->logFile)) {
            return file_get_contents($this->logFile);
        }
        return "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.";
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
    public function clearLogs()
    {
        if (file_exists($this->logFile)) {
            unlink($this->logFile);
            $this->log("–õ–æ–≥ —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω");
        }
    }
}

// –ö–ª–∞—Å—Å User —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–π—Ç–∞ Loggable
class User
{
    use Loggable;

    private $users = []; // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    public function register($username, $email)
    {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (empty($username) || empty($email)) {
            $this->log("–û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (username: '$username', email: '$email')");
            echo "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏<br><br>";
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->log("–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$username': $email");
            echo "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email<br><br>";
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($this->userExists($username, $email)) {
            $this->log("–û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$username' —Å email '$email'");
            echo "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç<br><br>";
            return false;
        }

        // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        $this->users[] = [
            'username' => $username,
            'email' => $email,
            'registered_at' => date('Y-m-d H:i:s')
        ];

        $this->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '$username' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å email '$email'<br><br>";
        return true;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private function userExists($username, $email)
    {
        foreach ($this->users as $user) {
            if ($user['username'] === $username || $user['email'] === $email) {
                return true;
            }
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public function getUsers()
    {
        return $this->users;
    }

    // –ú–µ—Ç–æ–¥ –ª–æ–≥–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–π—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    public function login($username)
    {
        foreach ($this->users as $user) {
            if ($user['username'] === $username) {
                $this->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É");
                echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '$username' —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É<br><br>";
                return true;
            }
        }

        $this->log("–û–®–ò–ë–ö–ê: –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$username'");
        echo "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '$username' –Ω–µ –Ω–∞–π–¥–µ–Ω<br><br>";
        return false;
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
echo "<h2>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π—Ç–∞ Loggable –∏ –∫–ª–∞—Å—Å–∞ User</h2>";

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ User
$userManager = new User();

echo "<h3>1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</h3>";

// –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
$userManager->register("john_doe", "john@example.com");
$userManager->register("jane_smith", "jane@gmail.com");
$userManager->register("alex_brown", "alex.brown@yahoo.com");

// –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
echo "<h3>2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h3>";
$userManager->register("", "empty@test.com");           // –ü—É—Å—Ç–æ–µ –∏–º—è
$userManager->register("test_user", "invalid-email");   // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
$userManager->register("john_doe", "duplicate@test.com"); // –î—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∏–º—è

echo "<h3>3. –ü–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:</h3>";
$userManager->login("john_doe");      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
$userManager->login("nonexistent");  // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

echo "<h3>4. –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</h3>";
$users = $userManager->getUsers();
if (!empty($users)) {
    echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
    echo "<tr><th>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</th><th>Email</th><th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th></tr>";
    foreach ($users as $user) {
        echo "<tr>";
        echo "<td>{$user['username']}</td>";
        echo "<td>{$user['email']}</td>";
        echo "<td>{$user['registered_at']}</td>";
        echo "</tr>";
    }
    echo "</table><br>";
} else {
    echo "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<br>";
}

echo "<h3>5. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞:</h3>";
echo "<pre style='background: #f5f5f5; padding: 10px; border: 1px solid #ddd;'>";
echo htmlspecialchars($userManager->getLogs());
echo "</pre>";

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–π—Ç–∞
echo "<h3>6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Å —Ç—Ä–µ–π—Ç–æ–º Loggable:</h3>";

class Order
{
    use Loggable;

    public function createOrder($orderId, $amount)
    {
        $this->log("–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #$orderId –Ω–∞ —Å—É–º–º—É $amount —Ä—É–±.");
        echo "üì¶ –ó–∞–∫–∞–∑ #$orderId —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É $amount —Ä—É–±.<br>";
    }
}

$orderManager = new Order();
$orderManager->createOrder("ORD-001", 2500);
$orderManager->createOrder("ORD-002", 1750);

echo "<h3>7. –õ–æ–≥–∏ –∑–∞–∫–∞–∑–æ–≤:</h3>";
echo "<pre style='background: #f5f5f5; padding: 10px; border: 1px solid #ddd;'>";
echo htmlspecialchars($orderManager->getLogs());
echo "</pre>";

